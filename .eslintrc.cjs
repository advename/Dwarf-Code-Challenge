// eslint-disable-next-line unicorn/prefer-module
module.exports = {
  env: {
    browser : true,
    commonjs: true,
    es6     : true,
  },
  settings: { react: { version: 'detect' } },
  extends : [
    'standard',
    'eslint:recommended',
    'plugin:jsdoc/recommended',
    'plugin:jsx-a11y/recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:unicorn/recommended',
    'plugin:varspacing/recommended',
  ],
  parserOptions: {
    ecmaFeatures: { jsx: true },
    ecmaVersion : 12,
    sourceType  : 'module',
  },
  plugins: [
    'jsdoc',
    'jsx-a11y',
    'react',
    'react-hooks',
    'unicorn',
    'varspacing',
  ],
  rules: {
    'curly'                : ['error', 'multi-or-nest'],
    'array-element-newline': [
      'error',
      {
        multiline: true,
        minItems : 3,
      },
    ],
    'array-bracket-newline': [
      'error',
      {
        multiline: true,
        minItems : 3,
      },
    ],
    'object-curly-newline': [
      'error',
      {
        ObjectExpression: {
          multiline    : true,
          minProperties: 3,
        },
        ObjectPattern: {
          multiline    : true,
          minProperties: 5,
        },
        ImportDeclaration: 'never',
        ExportDeclaration: 'always',
      },
    ],
    'object-property-newline': 'error',
    'camelcase'              : ['warn', { properties: 'never' }],
    'comma-dangle'           : ['error', 'always-multiline'],
    'no-multi-spaces'        : [
      'error',
      {
        exceptions: {
          VariableDeclarator  : true,
          AssignmentExpression: true,
        },
      },
    ],
    'no-var'              : 'error',
    'prefer-template'     : 'error',
    'linebreak-style'     : ['error', 'unix'],
    'no-console'          : ['error', { allow: ['warn', 'error'] }],
    'prefer-const'        : ['error', { destructuring: 'all' }],
    'quote-props'         : ['error', 'consistent-as-needed'],
    'object-curly-spacing': ['error', 'always'],
    'key-spacing'         : [
      'error',
      {
        align: {
          beforeColon: false,
          afterColon : true,
          on         : 'colon',
        },
      },
    ],
    'arrow-parens'      : ['error', 'always'],
    'operator-linebreak': ['error', 'before'],
    'spaced-comment'    : [
      'error',
      'always',
      { markers: ['*'] },
    ],
    'unicorn/catch-error-name'     : ['error', { name: 'error' }],
    'unicorn/filename-case'        : 'off',
    'unicorn/prevent-abbreviations': [
      'error',
      {
        checkProperties         : false,
        checkShorthandProperties: false,
        allowList               : {
          getErrMsg: true, props: true, Props: true,
        },
        ignore: [/^.*?react-app-env.*?$/i],
      },
    ],
    'unicorn/no-array-reduce'                      : 'off',
    'unicorn/no-null'                              : 'off',
    'jsdoc/check-alignment'                        : 'error',
    'jsdoc/check-examples'                         : 'off',
    'jsdoc/check-indentation'                      : 'error',
    'jsdoc/check-param-names'                      : 'error',
    'jsdoc/check-syntax'                           : 'error',
    'jsdoc/check-tag-names'                        : 'error',
    'jsdoc/check-types'                            : 'error',
    'jsdoc/implements-on-classes'                  : 'error',
    'jsdoc/newline-after-description'              : 'error',
    'jsdoc/no-undefined-types'                     : 'error',
    'jsdoc/require-description-complete-sentence'  : 'error',
    'jsdoc/require-hyphen-before-param-description': 'error',
    'jsdoc/require-param'                          : 'error',
    'jsdoc/require-param-description'              : 'off',
    'jsdoc/require-param-name'                     : 'error',
    'jsdoc/require-param-type'                     : 'error',
    'jsdoc/require-returns'                        : 'error',
    'jsdoc/require-returns-check'                  : 'error',
    'jsdoc/require-returns-description'            : 'off',
    'jsdoc/require-returns-type'                   : 'error',
    'jsdoc/valid-types'                            : 'error',
    'react/display-name'                           : 'off',
    'react/function-component-definition'          : 'error',
    'react/jsx-closing-bracket-location'           : 'error',
    'react/jsx-closing-tag-location'               : 'error',
    'react/jsx-curly-brace-presence'               : 'error',
    'react/jsx-curly-newline'                      : 'error',
    'react/jsx-curly-spacing'                      : 'error',
    'react/jsx-equals-spacing'                     : 'error',
    'react/jsx-first-prop-new-line'                : 'error',
    'react/jsx-fragments'                          : 'error',
    'react/jsx-indent'                             : [
      'error',
      2,
      { indentLogicalExpressions: true },
    ],
    'react/jsx-indent-props'           : ['error', 2],
    'react/jsx-max-props-per-line'     : 'error',
    'react/jsx-newline'                : ['error', { prevent: true }],
    'react/jsx-no-useless-fragment'    : 'error',
    'react/jsx-one-expression-per-line': 'error',
    'react/jsx-pascal-case'            : ['error', { allowNamespace: true }],
    'react/jsx-props-no-multi-spaces'  : 'error',
    'react/jsx-sort-props'             : 'error',
    'react/jsx-tag-spacing'            : 'error',
    'react/jsx-wrap-multilines'        : [
      'error',
      {
        declaration: 'parens-new-line',
        assignment : 'parens-new-line',
        return     : 'parens-new-line',
        arrow      : 'parens-new-line',
        condition  : 'parens-new-line',
        logical    : 'parens-new-line',
        prop       : 'parens-new-line',
      },
    ],
    'react/no-arrow-function-lifecycle'         : 'error',
    'react/no-multi-comp'                       : 'error',
    'react/no-namespace'                        : 'error',
    'react/no-redundant-should-component-update': 'error',
    'react/no-this-in-sfc'                      : 'error',
    'react/no-typos'                            : 'warn',
    'react/no-unescaped-entities'               : 'off',
    'react/no-unused-class-component-methods'   : 'error',
    'react/no-unused-state'                     : 'error',
    'react/no-will-update-set-state'            : 'error',
    'react/self-closing-comp'                   : 'error',

    // 'react/no-unused-prop-types'                : 'error',
    // allowArgumentsExplicitlyTypedAsAny: 0,
    // 'react/prop-types': 0,
  },
  overrides: [
    {
      files: ['*.generated.ts', '*.generated.tsx'],
      rules: { camelcase: 'off' },
    },
    {
      // Enable rules for TypeScript files
      files  : ['*.ts', '*.tsx'],
      plugins: ['@typescript-eslint'],
      parser : '@typescript-eslint/parser',
      extends: ['plugin:@typescript-eslint/recommended'],
      rules  : {
        'indent'                                           : 'off',
        'no-use-before-define'                             : 'off',
        '@typescript-eslint/explicit-function-return-type' : ['error'],
        '@typescript-eslint/explicit-module-boundary-types': ['error'],
        '@typescript-eslint/indent'                        : ['error', 2],
        '@typescript-eslint/no-use-before-define'          : ['error'],
        '@typescript-eslint/no-var-requires'               : 'error',
      },
    },
    {
      files: ['*.tsx'], 
      rules: { 'unicorn/filename-case': ['error', { case: 'pascalCase', ignore: ['useToast.tsx'] }] },
    },
  ],
  globals: {
    $      : true,
    jQuery : true,
    process: true,
    JSX    : true,
  },
}
